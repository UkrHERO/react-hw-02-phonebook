(this["webpackJsonpreact-hw-02-phonebook"]=this["webpackJsonpreact-hw-02-phonebook"]||[]).push([[0],{15:function(t,e,n){},17:function(t,e,n){},18:function(t,e,n){},19:function(t,e,n){"use strict";n.r(e);var a=n(1),r=n.n(a),c=n(7),o=n.n(c),i=(n(15),n(9)),s=n(2),u=n(3),l=n(5),d=n(4),b=n(10),h=n(8),j=n.n(h),m=n(0);var f=function(t){var e=t.children;return Object(m.jsx)("div",{className:j.a.container,children:e})},p=(n(17),function(t){Object(l.a)(n,t);var e=Object(d.a)(n);function n(){var t;Object(s.a)(this,n);for(var a=arguments.length,r=new Array(a),c=0;c<a;c++)r[c]=arguments[c];return(t=e.call.apply(e,[this].concat(r))).state={name:"",number:""},t.handleSubmit=function(e){e.preventDefault();var n=t.state,a=n.name,r=n.number;t.props.onSubmit(a,r),e.currentTarget[0].value="",e.currentTarget[1].value=""},t.handleChange=function(e){var n=e.currentTarget,a=n.name,r=n.value;"name"===a&&t.setState({name:r}),"number"===a&&t.setState({number:r})},t}return Object(u.a)(n,[{key:"render",value:function(){return Object(m.jsxs)("form",{onSubmit:this.handleSubmit,children:[Object(m.jsxs)("label",{children:["Name",Object(m.jsx)("input",{type:"text",name:"name",onChange:this.handleChange,pattern:"^[a-zA-Z\u0430-\u044f\u0410-\u042f]+(([' -][a-zA-Z\u0430-\u044f\u0410-\u042f ])?[a-zA-Z\u0430-\u044f\u0410-\u042f]*)*$",title:"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan",required:!0})]}),Object(m.jsxs)("label",{children:["Number",Object(m.jsx)("input",{type:"tel",name:"number",onChange:this.handleChange,pattern:"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}",title:"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +",required:!0})]}),Object(m.jsx)("button",{type:"submit",children:"Add contact"})]})}}]),n}(a.Component)),O=p,v=function(t){var e=t.value,n=t.onChange;return Object(m.jsxs)("label",{children:["Find contacts by name",Object(m.jsx)("input",{type:"text",value:e,onChange:n,name:"find"})]})},x=(n(18),function(t){var e=t.contacts,n=t.deleteContact;return Object(m.jsx)("ul",{children:e.map((function(t){return Object(m.jsxs)("li",{children:[Object(m.jsxs)("p",{children:[t.name,": ",t.number]}),Object(m.jsx)("button",{type:"button",onClick:function(){return n(t.id)},children:"Delete"})]},t.id)}))})}),C=function(t){Object(l.a)(n,t);var e=Object(d.a)(n);function n(){var t;Object(s.a)(this,n);for(var a=arguments.length,r=new Array(a),c=0;c<a;c++)r[c]=arguments[c];return(t=e.call.apply(e,[this].concat(r))).state={contacts:[],filter:"",name:"",number:""},t.addContact=function(e,n){var a={id:Object(b.a)(3),name:e,number:n};if(t.state.contacts.find((function(t){return t.name===a.name})))return alert("".concat(a.name," is already in contacts."));t.setState((function(t){var e=t.contacts;return{contacts:[a].concat(Object(i.a)(e))}}))},t.changeFilter=function(e){t.setState({filter:e.currentTarget.value})},t.getContacts=function(){var e=t.state,n=e.filter,a=e.contacts,r=n.toLowerCase();return a.filter((function(t){return t.name.toLowerCase().includes(r)}))},t.deleteContact=function(e){t.setState((function(t){return{contacts:t.contacts.filter((function(t){return t.id!==e}))}}))},t}return Object(u.a)(n,[{key:"render",value:function(){var t=this.getContacts();return Object(m.jsxs)(f,{children:[Object(m.jsx)("h1",{children:"Phonebook"}),Object(m.jsx)(O,{onSubmit:this.addContact}),Object(m.jsx)("h2",{children:"Contacts"}),Object(m.jsx)(v,{value:this.state.filter,onChange:this.changeFilter}),Object(m.jsx)(x,{contacts:t,deleteContact:this.deleteContact})]})}}]),n}(a.Component),g=C;o.a.render(Object(m.jsx)(r.a.StrictMode,{children:Object(m.jsx)(g,{})}),document.getElementById("root"))},8:function(t,e,n){t.exports={container:"Container_container__2EbEB"}}},[[19,1,2]]]);
//# sourceMappingURL=main.399d5cb6.chunk.js.map